spring.h2.console.enabled=true

#statistics
spring.jpa.properties.hibernate.generate_statistics=true

#hibernate log
logging.level.org.hibernate.stat=debug

#show sql
spring.jpa.show-sql=true

#format sql - never do this on production
spring.jpa.properties.hibernate.format_sql=true

#log hibernate
logging.level.org.hibernate.type=trace

# if needed i can specify the type of transaction isolation here like below - when the isolation level is set here, is valid to whole project as a default
#spring.jpa.properties.hibernate.connection.isolation = 2

#second level cache on hibernate-ehcache
#1 enable second level cache
spring.jpa.properties.hibernate.cache.use_second_level_cache=true

#2 specify the caching framework to use, in this case - Ehcache - use ctrl+shift+t to open and copy the qualified name
spring.jpa.properties.hibernate.cache.region.factory_class=org.hibernate.cache.ehcache.internal.EhcacheRegionFactory

#3 only cache what i specify to be cached 
spring.jpa.properties.javax.persistence.sharedCache.mode=ENABLE_SELECTIVE

logging.level.net.sf.ehcache=debug
#4 what data to be be cached

# since on other dadabases i need to create the schema and tables i can use H2 at start to take the queries executed to run on other databases in order to create theese tables
#just in case to use another database like mysql  
#spring.jpa.hibernate.ddl-auto=update
#spring.datasource.url=jdbc:mysql://localhost:3306/name_of_schema
#spring.datasource.username=userName
#spring.datasource.password=userPassword